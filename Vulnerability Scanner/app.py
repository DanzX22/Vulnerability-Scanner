from flask import Flask, render_template, request
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import socket

app = Flask(__name__)

s = requests.Session()
s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"

# Function to retrieve all forms
def get_forms(url):
    soup = BeautifulSoup(s.get(url).content, "html.parser")
    return soup.find_all("form")

def form_details(form):
    detailsOfForm = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get")
    inputs = []

    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({
            "type": input_type,
            "name": input_name,
            "value": input_value,
        })

    detailsOfForm['action'] = action
    detailsOfForm['method'] = method
    detailsOfForm['inputs'] = inputs
    return detailsOfForm

def vulnerable(response):
    errors = {"quoted string not properly terminated",
              "unclosed quotation mark after the character string",
              "you have an error in your SQL syntax"}
    for error in errors:
        if error in response.content.decode().lower():
            return True
    return False

def sql_injection_scan(url):
    forms = get_forms(url)
    results = []
    print(f"[+] Detected {len(forms)} forms on {url}.")

    for form in forms:
        details = form_details(form)
        for i in "\"'":
            data = {}
            for input_tag in details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["value"]:
                    data[input_tag['name']] = input_tag["value"] + i
                elif input_tag["type"] != "submit":
                    data[input_tag['name']] = f"test{i}"

            action = details['action']
            if not action:
                action = url
            else:
                action = urljoin(url, action)

            if details["method"].lower() == "post":
                res = s.post(action, data=data)
            elif details["method"].lower() == "get":
                res = s.get(action, params=data)
            
            if vulnerable(res):
                results.append(f"SQL Injection vulnerability detected in form action: {action}")
            else:
                results.append(f"No SQL Injection vulnerability detected in form action: {action}")

    return results

def port_scanner(host, port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(5)
    result = {}
    try:
        s.connect((host, port))
        result['status'] = "open"
    except:
        result['status'] = "closed"
    s.close()
    return result

@app.route("/", methods=["GET", "POST"])
def home():
    if request.method == "POST":
        url = request.form.get("url")
        if url:
            results = sql_injection_scan(url)
            return render_template("results.html", url=url, results=results)
        else:
            return render_template("index.html", error="Please enter a valid URL.")
    return render_template("index.html")

@app.route("/portscan", methods=["GET", "POST"])
def portscan():
    if request.method == "POST":
        host = request.form.get("host")
        port = int(request.form.get("port"))
        if host and port:
            result = port_scanner(host, port)
            return render_template("port_scan.html", host=host, port=port, result=result)
        else:
            return render_template("port_scan.html", error="Please enter a valid host and port.")
    return render_template("port_scan.html")

if __name__ == "__main__":
    app.run(debug=True)



